#!/bin/bash

# Função para verificar e aplicar configurações
apply_config_if_absent() {
    local file=$1
    local config=$2
    local content=$3

    if ! grep -q "$config" "$file"; then
        echo "$content" >> "$file"
    fi
}

# Identifica o gerenciador de exibição e/ou sessão
if systemctl status sddm &> /dev/null; then
    display_manager="sddm"
elif systemctl status gdm &> /dev/null; then
    display_manager="gdm"
elif systemctl status lightdm &> /dev/null; then
    display_manager="lightdm"
else
    display_manager="unknown"
fi

# Configurações específicas para SDDM (KDE e LXQT)
if [[ $display_manager == "sddm" ]]; then
    apply_config_if_absent ~/.config/kscreenlockerrc 'Autolock=false' '[Daemon]\nAutolock=false\nLockOnResume=false'
    apply_config_if_absent ~/.config/kwalletrc 'Enabled=false' '[Wallet]\nEnabled=false'
    # Outras configurações específicas do KDE e LXQT podem ser adicionadas aqui
fi

# Configurações específicas para GDM (GNOME)
if [[ $display_manager == "gdm" ]]; then
    # Adicione aqui as configurações específicas do GNOME
fi

# Obtém a lista de monitores disponíveis e a resolução recomendada do primeiro monitor
primeiro_monitor=$(xrandr | grep -w connected | awk 'NR==1{print $1}')
resolucao_primeiro_monitor=$(xrandr | grep "$primeiro_monitor connected" -A1 | tail -n1 | awk '{print $1}')

# Constrói a configuração xrandr para duplicar a saída em todos os monitores
configuracao_xrandr=""
xrandr | grep -w connected | awk '{print $1}' | while read -r monitor; do
    if [ "$monitor" != "$primeiro_monitor" ]; then
        configuracao_xrandr+=" --output $monitor --same-as $primeiro_monitor --mode $resolucao_primeiro_monitor"
    fi
done

# Aplica a configuração xrandr
xrandr $configuracao_xrandr

# Processa argumentos do kernel
eval "kernel_args=( $(cat /proc/cmdline) )"
for arg in "${kernel_args[@]}"; do
    case "$arg" in
        biglinux.bootcmd=*)
            ${arg#biglinux.bootcmd=}
            exit
            ;;
    esac
done

# Gerencia o serviço biglinux-dual-gpu-manager-after-display-manager
if systemctl -q is-enabled biglinux-dual-gpu-manager-after-display-manager; then
    sudo systemctl start biglinux-dual-gpu-manager-after-display-manager 2>&1 &
fi

# Configurações de ambiente para QT e executa bigbashview
QT_QUICK_BACKEND=software QMLSCENE_DEVICE=softwarecontext QTWEBENGINE_CHROMIUM_FLAGS="--disable-logging --disable-gpu --no-sandbox --single-process --disable-gpu-compositing" \
/usr/bin/bigbashview -c black -t qt -s $(LANG=C xdpyinfo | grep 'dimensions:' | awk '{print $2}') index.html

# Configurações de idioma
lang_code=$(cat /tmp/big_language)
for var in LANGUAGE LANG LC_MESSAGES; do
    export $var="${lang_code}.UTF-8"
done

echo "[Formats]
LANG=${lang_code}.UTF-8" > $HOME/.config/plasma-localerc

echo "$lang_code" > $HOME/.config/user-dirs.locale

# Aplica configuração do desktop
change-plasma-theme --apply $(awk '{print $2}' /etc/big_desktop_changed) clean quiet

# Cria pastas no diretório home
wait
LC_ALL="${lang_code}.UTF-8" xdg-user-dirs-update
. ~/.config/user-dirs.dirs
cp -f "/usr/share/applications/calamares-biglinux.desktop" "$XDG_DESKTOP_DIR/calamares-biglinux.desktop"
chmod +x "$XDG_DESKTOP_DIR/calamares-biglinux.desktop"

# Executa script e reinicia o serviço
chmod +x /tmp/biglightdm
/tmp/biglightdm

# Reinicia o gerenciador de exibição apropriado
case $display_manager in
    "sddm")
        # Para ambientes KDE e LXQT
        sudo systemctl restart sddm
        ;;
    "gdm")
        # Para ambientes GNOME
        sudo systemctl restart gdm
        ;;
    "lightdm")
        # Para outros ambientes, usando LightDM
        sudo systemctl restart lightdm
        ;;
    *)
        # Se o gerenciador de exibição não for identificado
        echo "Gerenciador de exibição desconhecido. Não é possível reiniciar."
        ;;
esac
