#!/bin/bash
##################################
#  Author1: Bruno Goncalves (www.biglinux.com.br) 
#  Author2: Rafael Ruscher (rruscher@gmail.com)  
#  Date:    2022/08/19
#  
#  Description: Control Center to help usage of BigLinux 
#  
# Licensed by GPL V2 or greater
##################################

#Translation
export LANGUAGE=$(</tmp/big_language).UTF-8
export LANG=$LANGUAGE
export LC_ALL=$LANGUAGE
export TEXTDOMAINDIR="/usr/share/locale"
export TEXTDOMAIN=biglinux-livecd

echo "<script>const projectName = 'biglinux-livecd';</script>"

cat /usr/share/bigbashview/framework/html/genericHeader.html

######
# Keyboard
######
if [ "$keyboard" != "" ]; then

    setxkbmap "${keyboard//\\/}"  </dev/null &>/dev/null &
    echo "$keyboard" > /tmp/big_keyboard
    echo "[Layout]
    LayoutList=$keyboard
    Use=true" > ~/.config/kxkbrc
else
    if [ -e "/tmp/big_keyboard" ]; then
        setxkbmap "$(sed 's|\\||g' /tmp/big_keyboard)"  </dev/null &>/dev/null &
        echo "[Layout]
        LayoutList=$(sed 's|\\||g' /tmp/big_keyboard)
        Use=true" > ~/.config/kxkbrc
    fi
fi

Select_Desktop=$"Choose the desktop configuration:"


cat << EOF
  <link rel="stylesheet" href="style.css">
  <style>
    .desktop-image { min-width: 22vw; }
    .theme-image { min-width: 20vh; }
    .margin-desktop {
      margin-left: 15%;
      margin-right: 15%;
    }
  </style>
</head>
<body x-data="environment()">
  <nav class="center-align top-bar padding">
    <i class="icon-menu">language_chinese_dayi</i>
    <i class="icon-menu">keyboard</i>
    <img class="logo-image" src="/usr/share/icons/hicolor/scalable/apps/big-favicon-new.svg">
    <i class="icon-menu">monitor</i>
    <i class="icon-menu">palette</i>
  </nav>
      <h5 class="small center-align large-margin large-padding">$Select_Desktop</h5>
  <div class="autogrid-fit center-align margin-desktop">
      <!-- Available desktops -->
      <template x-for="(desktopName, index) in listDesktops" :key="index">
          <button @click="applyDesktop(desktopName)"
                  :id="'desktop-' + index"
                  class="vertical border no-border space-between box-items">
              <img :src="'/usr/share/bigbashview/apps/biglinux-themes-gui/img/' + desktopName + '.svg'" class="responsive no-round desktop-image" />
          </button>
      </template>
  </div>

  <script>
  document.addEventListener('alpine:init', () => {
      Alpine.data('environment', () => ({
          desktop: '',
          listDesktops: [],
          currentFocus: 0,
          columns: 0,
          async init() {
              await this.fetchDesktops();
              this.addKeyboardNavigation();
              window.addEventListener('resize', this.calculateColumns.bind(this));
              this.calculateColumns();
          },
          async fetchDesktops() {
              const response = await fetch('/usr/share/bigbashview/apps/biglinux-themes-gui/list-desktops.sh');
              const text = await response.text();
              this.listDesktops = text.split(/\r?\n/).filter(line => line.trim() !== '');
          },
          calculateColumns() {
              const container = document.querySelector('body');
              const button = container.querySelector('button');
              if (button) {
                  const buttonWidth = button.offsetWidth * 1.3;
                  this.columns = Math.floor(container.offsetWidth / buttonWidth);
              }
          },
          applyDesktop(desktopName = '') {
              if (desktopName === '') {
                  desktopName = this.listDesktops[this.currentFocus];
              }
              _run('/usr/share/bigbashview/apps/biglinux-themes-gui/apply-desktop.sh ' + desktopName + ' quiet');
              _run('echo ' + this.desktopName + ' > /tmp/big_desktop_changed');
              location.href = 'theme.sh.htm';
          },
          addKeyboardNavigation() {
              window.addEventListener('keydown', (event) => {
                  if (event.key === 'ArrowDown') {
                      event.preventDefault();
                      this.moveFocus('down');
                  } else if (event.key === 'ArrowUp') {
                      event.preventDefault();
                      this.moveFocus('up');
                  } else if (event.key === 'ArrowLeft') {
                      event.preventDefault();
                      this.moveFocus('left');
                  } else if (event.key === 'ArrowRight') {
                      event.preventDefault();
                      this.moveFocus('right');
                  } else if (event.key === 'Enter') {
                      event.preventDefault();
                      this.applyDesktop();
                  }
              });
          },
          moveFocus(direction) {
              this.removeHighlight();
              const total = this.listDesktops.length;
              const columns = this.columns || 1; // Default to 1 if not calculated

              if (direction === 'down') {
                  this.currentFocus = (this.currentFocus + columns) % total;
              } else if (direction === 'up') {
                  this.currentFocus = (this.currentFocus - columns + total) % total;
              } else if (direction === 'left') {
                  this.currentFocus = (this.currentFocus - 1 + total) % total;
              } else if (direction === 'right') {
                  this.currentFocus = (this.currentFocus + 1) % total;
              }

              this.highlightCurrent();
          },
          highlightCurrent() {
              const buttons = document.querySelectorAll('.autogrid-fit button');
              buttons.forEach(button => button.classList.remove('highlight'));
              const currentElement = buttons[this.currentFocus];
              if (currentElement) {
                  currentElement.focus();
                  currentElement.classList.add('highlight');
              }
          },
          removeHighlight() {
              const buttons = document.querySelectorAll('.autogrid-fit button');
              buttons.forEach(button => button.classList.remove('highlight'));
          }
      }));
  });
  </script>
</body>
</html>
EOF




